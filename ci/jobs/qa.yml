jobs:
  - name: qa
    max_in_flight: 1
    plan:
      - get: aws-azkaban
        trigger: true
      - get: manage-mysql-user-release
        trigger: true
      - .: (( inject meta.plan.terraform-bootstrap-azkaban ))
        params:
          TF_WORKSPACE: 'qa'
#      - .: (( inject meta.plan.terraform-apply ))
#        params:
#          TF_WORKSPACE: 'qa'
#      - .: (( inject meta.plan.terraform-plan ))
#        params:
#          TF_WORKSPACE: 'qa'
#      - .: (( inject meta.plan.terraform-output-azkaban ))
#        params:
#          TF_WORKSPACE: 'qa'
#      - .: (( inject meta.plan.running-jobs ))
#        config:
#          params:
#            AWS_ACC: ((aws_account.qa))
#            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
#            TF_WORKSPACE: 'qa'
#      - .: (( inject meta.plan.cycle-azkaban-containers ))
#        config:
#          params:
#            AWS_ACC: ((aws_account.qa))
#            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
#            EXECUTOR_NAME: "azkaban-external-executor"
#            WEBSERVER_NAME: "azkaban-external-webserver"
#            LAMBDA_NAME: "truncate_external_table_lambda"
      - .: (( inject meta.plan.await-azkaban-webserver ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            WEBSERVER_NAME: "azkaban-external-webserver"
#      - .: (( inject meta.plan.create-e2e-project-files ))
#        config:
#          params:
#            AWS_ACC: ((aws_account.qa))
#            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
#      - .: (( inject meta.plan.create-e2e-project ))
#        config:
#          params:
#            AWS_ACC: ((aws_account.qa))
#            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
#      - .: (( inject meta.plan.execute-e2e-flow ))
#        config:
#          params:
#            AWS_ACC: ((aws_account.qa))
#            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
#      - .: (( inject meta.plan.monitor-e2e-flow ))
#        config:
#          params:
#            AWS_ACC: ((aws_account.qa))
#            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci

  - name: rotate-mysql-password-master-qa
    plan:
      - get: secrets-management
        trigger: false
      - .: (( inject meta.plan.rotate-mysql-master-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            DB_NAME: "azkaban-database"
            SECRET_ID: "azkaban-master-rds-password"
          inputs:
            - name: secrets-management

  - name: rotate-mysql-password-external-master-qa
    plan:
      - get: secrets-management
        trigger: false
      - .: (( inject meta.plan.rotate-mysql-master-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            DB_NAME: "azkaban-external-database"
            SECRET_ID: "azkaban-external-master-rds-password"
          inputs:
            - name: secrets-management

  - name: rotate-azkaban-webserver-password-qa
    plan:
      - .: (( inject meta.plan.rotate-azkaban-webserver-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            PARAM_NAME: "azkaban-webserver-rds-password"
            LAMBDA_NAME: "manage-azkaban-mysql-user"

  - name: rotate-azkaban-external-webserver-password-qa
    plan:
      - .: (( inject meta.plan.rotate-azkaban-webserver-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            PARAM_NAME: "azkaban-external-webserver-rds-password"
            LAMBDA_NAME: "manage-azkaban-external-mysql-user"

  - name: rotate-azkaban-executor-password-qa
    plan:
      - .: (( inject meta.plan.rotate-azkaban-executor-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            PARAM_NAME: "azkaban-executor-rds-password"
            LAMBDA_NAME: "manage-azkaban-mysql-user"

  - name: rotate-azkaban-external-executor-password-qa
    plan:
      - .: (( inject meta.plan.rotate-azkaban-executor-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            PARAM_NAME: "azkaban-external-executor-rds-password"
            LAMBDA_NAME: "manage-azkaban-external-mysql-user"

  - name: cycle-azkaban-containers-qa
    plan:
      - get: aws-azkaban
        trigger: false
      - get: manage-mysql-user-release
        trigger: false
      - .: (( inject meta.plan.terraform-bootstrap-azkaban ))
      - .: (( inject meta.plan.terraform-output-azkaban ))
        params:
          TF_WORKSPACE: 'qa'
      - .: (( inject meta.plan.cycle-azkaban-containers ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            EXECUTOR_NAME: "azkaban-executor"
            WEBSERVER_NAME: "azkaban-webserver"
            LAMBDA_NAME: "truncate_table_lambda"
        ensure:
          .: (( inject meta.plan.terraform-apply ))
          params:
            TF_WORKSPACE: 'qa'

  - name: cycle-external-azkaban-containers-qa
    plan:
      - get: aws-azkaban
        trigger: false
      - get: manage-mysql-user-release
        trigger: false
      - .: (( inject meta.plan.terraform-bootstrap-azkaban ))
      - .: (( inject meta.plan.terraform-output-azkaban ))
        params:
          TF_WORKSPACE: 'qa'
      - .: (( inject meta.plan.cycle-azkaban-containers ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            EXECUTOR_NAME: "azkaban-external-executor"
            WEBSERVER_NAME: "azkaban-external-webserver"
            LAMBDA_NAME: "truncate_external_table_lambda"
        ensure:
          .: (( inject meta.plan.terraform-apply ))
          params:
            TF_WORKSPACE: 'qa'

  - name: rotate-azkaban-admin-password-qa
    plan:
      - .: (( inject meta.plan.rotate-azkaban-admin-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            SECRET_ID: "/concourse/dataworks/workflow_manager"

  - name: rotate-azkaban-external-admin-password-qa
    plan:
      - .: (( inject meta.plan.rotate-azkaban-admin-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
            SECRET_ID: "/concourse/dataworks/workflow_manager/azkaban_external"
