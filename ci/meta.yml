meta:
  plan:
    check-running-jobs:
      task: check-running-jobs
      config:
        platform: linux
        image_resource:
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
            version: ((dataworks.docker_awscli_version))
          type: docker-image
        run:
          path: sh
          args:
            - -c
            - |
              source ./ci/utility/environment.sh
              check_running_executions
        inputs:
          - name: terraform-output-azkaban
          - name: aws-azkaban
      params:
        AWS_REGION: eu-west-2
        AWS_DEFAULT_REGION: eu-west-2


    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap-azkaban:
      task: terraform-bootstrap-azkaban
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-bootstrap-azkaban
              cp terraform.tfvars ../terraform-bootstrap-azkaban
          dir: aws-azkaban
        inputs:
          - name: aws-azkaban
        outputs:
          - name: terraform-bootstrap-azkaban
      params:
        AWS_REGION: eu-west-2

    terraform-bootstrap-dataworks-cognito:
      task: terraform-bootstrap-dataworks-cognito
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cd deploy
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../../terraform-bootstrap-dataworks-cognito
              cp terraform.tfvars ../../terraform-bootstrap-dataworks-cognito
          dir: dataworks-cognito
        inputs:
          - name: dataworks-cognito
        outputs:
          - name: terraform-bootstrap-dataworks-cognito
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              exit_status=0
              cp ../terraform-bootstrap-azkaban/terraform.tf .
              cp ../terraform-bootstrap-azkaban/terraform.tfvars .
              export TF_VAR_manage_mysql_user_zip="{base_path = \"../manage-mysql-user-release\", version = \"$(cat ../manage-mysql-user-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan -detailed-exitcode -out terraform.plan || exit_status=$?
              if [ $exit_status -eq 0 ]; then
                  echo "No changes, not applying"
              elif [ $exit_status -eq 1 ]; then
                  echo "Terraform plan failed"
                  exit 1
              elif [ $exit_status -eq 2 ]; then
                  terraform apply -auto-approve terraform.plan
                  touch ../terraform-success/success
              fi
          dir: aws-azkaban

        inputs:
          - name: aws-azkaban
          - name: terraform-bootstrap-azkaban
          - name: manage-mysql-user-release
        outputs:
          - name: terraform-success

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../terraform-success/success ]; then
              cp ../terraform-bootstrap-azkaban/terraform.tf .
              cp ../terraform-bootstrap-azkaban/terraform.tfvars .
              export TF_VAR_manage_mysql_user_zip="{base_path = \"../manage-mysql-user-release\", version = \"$(cat ../manage-mysql-user-release/version)\"}"
              terraform workspace show
              terraform init
              if [[ "${SKIP_EXIT_CODE}" == "true" ]]; then
                  echo "Performing plan with no exit code check due to SKIP_EXIT_CODE of '${SKIP_EXIT_CODE}'"
                  terraform plan
                else
                  echo "Performing plan with exit code check due to SKIP_EXIT_CODE of '${SKIP_EXIT_CODE}'"
                  terraform plan -detailed-exitcode
                fi
              else
                  echo "Nothing to plan exiting"
                  exit 0 
              fi
          dir: aws-azkaban
        inputs:
          - name: aws-azkaban
          - name: terraform-bootstrap-azkaban
          - name: manage-mysql-user-release
          - name: terraform-success
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output-azkaban:
      task: terraform-output-azkaban
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap-azkaban/terraform.tf .
              cp ../terraform-bootstrap-azkaban/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-azkaban/outputs.json
          dir: aws-azkaban
        inputs:
          - name: aws-azkaban
          - name: terraform-bootstrap-azkaban
        outputs:
          - name: terraform-output-azkaban

    terraform-output-dataworks-cognito:
      task: terraform-output-dataworks-cognito
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cd deploy
              cp ../../terraform-bootstrap-dataworks-cognito/terraform.tf .
              cp ../../terraform-bootstrap-dataworks-cognito/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../../terraform-output/outputs.json
          dir: dataworks-cognito
        inputs:
          - name: dataworks-cognito
          - name: terraform-bootstrap-dataworks-cognito
        outputs:
          - name: terraform-output

    rotate-mysql-master-password:
      task: rotate-mysql-master-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          DB_NAME: ((DB_NAME))
          SECRET_ID: ((SECRET_ID))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              pip install boto3
              ./rotate_rds_master_user_password_update_secrets_manager.py $DB_NAME $SECRET_ID
          dir: secrets-management
        inputs:
          - name: secrets-management

    rotate-mysql-password:
      task: rotate-mysql-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          LAMBDA_NAME: ((LAMBDA_NAME))
          USERNAME: placeholder
          PARAM_NAME: placeholder
          PRIVILEGES: ""
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              jq -n --arg Username "$USERNAME" --arg Paramname "$PARAM_NAME" --arg Privileges "$PRIVILEGES" '{mysql_user_username: $Username, mysql_user_password_secret_name: $Paramname, privileges: $Privileges}' > manifest.json
              echo "Manifest is:"
              cat manifest.json
              aws lambda invoke --function-name $LAMBDA_NAME --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
              cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"


    rotate-azkaban-webserver-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "azkaban-webserver"
          PARAM_NAME: ((PARAM_NAME))
          LAMBDA_NAME: ((LAMBDA_NAME))
          PRIVILEGES: ALL

    rotate-azkaban-executor-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "azkaban-executor"
          PARAM_NAME: ((PARAM_NAME))
          LAMBDA_NAME: ((LAMBDA_NAME))
          PRIVILEGES: ALL

    cycle-azkaban-containers:
      task: cycle-azkaban-containers
      config:
        platform: linux
        image_resource:
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
            version: ((dataworks.docker_awscli_version))
          type: docker-image
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          CLUSTER: main
          EXECUTOR_NAME: ((EXECUTOR_NAME))
          WEBSERVER_NAME: ((WEBSERVER_NAME))
          LAMBDA_NAME: ((LAMBDA_NAME))
        inputs:
          - name: terraform-output
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              MAX_RETRIES=60

              TRUNCATE_TABLE_FUNCTION_NAME=$(jq -r ".$LAMBDA_NAME.value.function_name" < ./terraform-output/outputs.json)

              aws ecs update-service --cluster $CLUSTER --service $EXECUTOR_NAME --desired-count 0 > /dev/null
              aws ecs update-service --cluster $CLUSTER --service $WEBSERVER_NAME --desired-count 0 > /dev/null
              executor_running_count=$(aws ecs describe-services --cluster $CLUSTER --services $EXECUTOR_NAME | jq -r '.services[0].runningCount')
              webserver_running_count=$(aws ecs describe-services --cluster $CLUSTER --services $WEBSERVER_NAME | jq -r '.services[0].runningCount')

              retries=0
              while [ $executor_running_count -ne 0 ] || [ $webserver_running_count -ne 0 ]; do
                if [ "$retries" -eq $MAX_RETRIES ]; then
                  echo "ERROR: MAX RETRIES Exceeded, Azkaban executor or webserver taking too long to shut down. Exiting..."
                  exit 1;
                fi

                executor_running_count=$(aws ecs describe-services --cluster $CLUSTER --services $EXECUTOR_NAME | jq -r '.services[0].runningCount')
                webserver_running_count=$(aws ecs describe-services --cluster $CLUSTER --services $WEBSERVER_NAME | jq -r '.services[0].runningCount')

                retries=$((retries + 1))
                sleep 10;
              done;

              aws lambda invoke --function-name $TRUNCATE_TABLE_FUNCTION_NAME \
                                --invocation-type RequestResponse \
                                --payload '{ "table_to_truncate": "executors" }' \
                                --cli-connect-timeout 600 \
                                --cli-read-timeout 600 output.json

              jq -eC "if .errorMessage? then error(.errorMessage) else true end" < output.json

              aws ecs update-service --cluster $CLUSTER --service $EXECUTOR_NAME --desired-count 1 > /dev/null
              retries=0
              while [ "$executor_running_count" -eq 0 ]; do
                if [ "$retries" -eq $MAX_RETRIES ]; then
                  echo "ERROR: MAX RETRIES Exceeded, Azkaban executor taking too long to start. Exiting..."
                  exit 1;
                fi

                executor_running_count=$(aws ecs describe-services --cluster $CLUSTER --services $EXECUTOR_NAME | jq -r '.services[0].runningCount')

                retries=$((retries + 1))
                sleep 10;
              done;

    terraform-dataworks-analytical-frontend-service-bootstrap:
      task: terraform-dataworks-analytical-frontend-service-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
            version: ((dataworks.docker_awscli_version))
          type: docker-image
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_REGION=((dataworks.aws_region))
              python ../../../bootstrap_terraform.py
              cp terraform.tf ../../../../terraform-config
              cp terraform.tfvars ../../../../terraform-config
          dir: dataworks-analytical-frontend-service/terraform/deploy/app
        inputs:
          - name: dataworks-analytical-frontend-service
        outputs:
          - name: terraform-config

    terraform-output-frontend-service:
      task: terraform-output-frontend-service
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../../../../terraform-output-frontend-service/outputs.json
          dir: dataworks-analytical-frontend-service/terraform/deploy/app
        inputs:
          - name: terraform-config
        outputs:
          - name: terraform-output-frontend-service

    put-keystore-data:
      task: put-keystore-data
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          SECRET_ID: ((SECRET_ID))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              USERPOOL_ID="$(cat terraform-output-frontend-service/outputs.json |  jq -r '.app_client.value.user_pool_id')"
              ENCODED_DATA=$(curl https://cognito-idp.((dataworks.aws_region)).amazonaws.com/$USERPOOL_ID/.well-known/jwks.json | base64)
              UPDATED_SECRET="$(aws secretsmanager get-secret-value --secret-id $SECRET_ID --query SecretBinary --output text | base64 -d | jq -r --arg data "$ENCODED_DATA" '.keystore_data = $data')"
              aws secretsmanager put-secret-value --secret-id $SECRET_ID --secret-binary "${UPDATED_SECRET}"
        inputs:
          - name: terraform-output-frontend-service

    rotate-azkaban-admin-password:
      task: rotate-azkaban-admin-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          SECRET_ID: ((SECRET_ID))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              RANDOM_PASSWORD=$(aws secretsmanager get-random-password --password-length 25 --no-include-space --exclude-punctuation --require-each-included-type | jq -r .RandomPassword)
              UPDATED_SECRET_BINARY="$(aws secretsmanager get-secret-value --secret-id $SECRET_ID --query SecretBinary --output text | base64 -d | jq -r --arg data "$RANDOM_PASSWORD" '.azkaban_password = $data')"
              aws secretsmanager put-secret-value --secret-id $SECRET_ID --secret-binary "${UPDATED_SECRET_BINARY}"

    create-terraform-success:
      task: create-terraform-success
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          args:
            - -exc
            - |
              touch ../terraform-success/success
          dir: aws-azkaban
        inputs:
          - name: aws-azkaban
        outputs:
          - name: terraform-success

    generate-random-password:
      task: generate-random-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              aws secretsmanager get-random-password --password-length 25 --no-include-space --require-each-included-type | jq -r .RandomPassword >> random-password/random-password.txt
        outputs:
          - name: random-password


    update-cognito-user-password:
      task: update-cognito-user-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              RANDOM_PASSWORD=$(cat random-password/random-password.txt)
              USER_POOL_ID=$(jq -r '.cognito.value.user_pool.id' terraform-output/outputs.json)
              aws cognito-idp admin-set-user-password --user-pool-id $USER_POOL_ID --username azkaban_admin --password $RANDOM_PASSWORD --permanent --region $AWS_REGION
        inputs:
          - name: terraform-output
          - name: random-password

    update-secretsmanager-secret-password:
      task: update-secretsmanager-secret-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              RANDOM_PASSWORD=$(cat random-password/random-password.txt)
              UPDATED_SECRET_BINARY=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID --query SecretBinary --output text | base64 -d | jq -r --arg data "$RANDOM_PASSWORD" '.azkaban_password = $data')
              aws secretsmanager put-secret-value --secret-id $SECRET_ID --secret-binary "${UPDATED_SECRET_BINARY}"
        inputs:
          - name: random-password

