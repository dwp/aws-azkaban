meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
              cp terraform.tfvars ../terraform-bootstrap
          dir: aws-azkaban
        inputs:
          - name: aws-azkaban
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              cp ../terraform-bootstrap/terraform.tfvars .
              export TF_VAR_manage_mysql_user_lambda_zip="{base_path = \"../manage-mysql-user-release\", version = \"$(cat ../manage-mysql-user-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: aws-azkaban
          
        inputs:
          - name: aws-azkaban
          - name: terraform-bootstrap
          - name: manage-mysql-user-release
    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              cp ../terraform-bootstrap/terraform.tfvars .
              export TF_VAR_manage_mysql_user_lambda_zip="{base_path = \"../manage-mysql-user-release\", version = \"$(cat ../manage-mysql-user-release/version)\"}"
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: aws-azkaban
        inputs:
          - name: aws-azkaban
          - name: terraform-bootstrap
          - name: manage-mysql-user-release
      params:
        DETAILED_EXITCODE: -detailed-exitcode
    terraform-output:
      task: terraform-output
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              cp ../terraform-bootstrap/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output/outputs.json
          dir: aws-azkaban
        inputs:
            - name: aws-azkaban
            - name: terraform-bootstrap
        outputs:
            - name: terraform-output
    rotate-mysql-master-password:
      task: rotate-mysql-master-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              pip install boto3
              ./rotate_rds_master_user_password_update_secrets_manager.py azkaban-database azkaban-master-rds-password
          dir: secrets-management
        inputs:
          - name: secrets-management
    rotate-mysql-password:
      task: rotate-mysql-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          USERNAME: placeholder
          PARAM_NAME: placeholder
          PRIVILEGES: ''
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              jq -n --arg Username "$USERNAME" --arg Paramname "$PARAM_NAME" --arg Privileges "$PRIVILEGES" '{mysql_user_username: $Username, mysql_user_password_secret_name: $Paramname, privileges: $Privileges}' > manifest.json
              echo "Manifest is:"
              cat manifest.json
              aws lambda invoke --function-name manage-azkaban-mysql-user --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
              cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"
    rotate-azkaban-webserver-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "azkaban-webserver"
          PARAM_NAME: "azkaban-webserver-rds-password"
          PRIVILEGES: ALL
    rotate-azkaban-executor-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "azkaban-executor"
          PARAM_NAME: "azkaban-executor-rds-password"
          PRIVILEGES: ALL


    cycle-azkaban-executor:
      task: cycle-azkaban-executor
      config:
        platform: linux
        image_resource:
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
            version: ((dataworks.docker_awscli_version))
          type: docker-image
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          CLUSTER: main
          SERVICE: azkaban-executor
        inputs:
          - name: terraform-output
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              MAX_RETRIES=60


              TRUNCATE_TABLE_FUNCTION_NAME=$(jq -r '.truncate_table_lambda.value.function_name' < ./terraform-output/outputs.json)

              aws ecs update-service --cluster $CLUSTER --service $SERVICE --desired-count 0 > /dev/null
              running_count=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE | jq -r '.services[0].runningCount')

              retries=0
              while [ "$running_count" -ne 0 ]; do
                if [ "$retries" -eq $MAX_RETRIES ]; then
                  exit 1;
                fi

                running_count=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE | jq -r '.services[0].runningCount');

                retries=$((retries + 1))
                sleep 10;
              done;

              aws lambda invoke --function-name $TRUNCATE_TABLE_FUNCTION_NAME \
                                --invocation-type RequestResponse \
                                --payload '{ "table_to_truncate": "executors" }' \
                                --cli-connect-timeout 600 \
                                --cli-read-timeout 600 output.json

              jq -eC "if .errorMessage? then error(.errorMessage) else true end" < output.json


    terraform-dataworks-analytical-frontend-service-bootstrap:
      task: terraform-dataworks-analytical-frontend-service-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
            version: ((dataworks.docker_awscli_version))
          type: docker-image
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_REGION=((dataworks.aws_region))
              python ../../../bootstrap_terraform.py
              cp terraform.tf ../../../../terraform-config
              cp terraform.tfvars ../../../../terraform-config
          dir: dataworks-analytical-frontend-service/terraform/deploy/app
        inputs:
          - name: dataworks-analytical-frontend-service
        outputs:
          - name: terraform-config

    terraform-output-frontend-service:
      task: terraform-output-frontend-service
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              ls ../../../../
              ls ../../../
              cp ../../../../terraform-config/terraform.tf .
              cp ../../../../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../../../../terraform-output-frontend-service/outputs.json
          dir: dataworks-analytical-frontend-service/terraform/deploy/app
        inputs:
          - name: terraform-config
        outputs:
          - name: terraform-output-frontend-service

    put_keystore_data:
      task: put_keystore_data
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              USERPOOL_ID="$(cat terraform-output-frontend-service/outputs.json |  jq -r '.app_client.value.user_pool_id')"
              ENCODED_DATA=$(curl https://cognito-idp.((dataworks.aws_region)).amazonaws.com/$USERPOOL_ID/.well-known/jwks.json | base64)
              UPDATED_SECRET="$(aws secretsmanager get-secret-value --secret-id /concourse/dataworks/workflow_manager --query SecretBinary --output text | base64 -d | jq -r --arg data "$ENCODED_DATA" '.keystore_data = $data')"
              aws secretsmanager put-secret-value --secret-id /concourse/dataworks/workflow_manager --secret-binary "${UPDATED_SECRET}"
        inputs:
          - name: terraform-output-frontend-service